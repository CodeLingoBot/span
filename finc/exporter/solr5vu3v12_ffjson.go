// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: finc/exporter/solr5vu3v12.go
// DO NOT EDIT!

package exporter

import (
	"bytes"
	"fmt"

	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Solr5Vufind3v12) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Solr5Vufind3v12) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.AccessFacet) != 0 {
		buf.WriteString(`"access_facet":`)
		fflib.WriteJsonString(buf, string(mj.AccessFacet))
		buf.WriteByte(',')
	}
	if len(mj.AuthorFacet) != 0 {
		buf.WriteString(`"author_facet":`)
		if mj.AuthorFacet != nil {
			buf.WriteString(`[`)
			for i, v := range mj.AuthorFacet {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Authors) != 0 {
		buf.WriteString(`"author":`)
		if mj.Authors != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Authors {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SecondaryAuthors) != 0 {
		buf.WriteString(`"author2":`)
		if mj.SecondaryAuthors != nil {
			buf.WriteString(`[`)
			for i, v := range mj.SecondaryAuthors {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Allfields) != 0 {
		buf.WriteString(`"allfields":`)
		fflib.WriteJsonString(buf, string(mj.Allfields))
		buf.WriteByte(',')
	}
	if len(mj.FincClassFacet) != 0 {
		buf.WriteString(`"finc_class_facet":`)
		if mj.FincClassFacet != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FincClassFacet {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Formats) != 0 {
		buf.WriteString(`"format":`)
		if mj.Formats != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Formats {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Fullrecord) != 0 {
		buf.WriteString(`"fullrecord":`)
		fflib.WriteJsonString(buf, string(mj.Fullrecord))
		buf.WriteByte(',')
	}
	if len(mj.Fulltext) != 0 {
		buf.WriteString(`"fulltext":`)
		fflib.WriteJsonString(buf, string(mj.Fulltext))
		buf.WriteByte(',')
	}
	if len(mj.HierarchyParentTitle) != 0 {
		buf.WriteString(`"hierarchy_parent_title":`)
		if mj.HierarchyParentTitle != nil {
			buf.WriteString(`[`)
			for i, v := range mj.HierarchyParentTitle {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.ID) != 0 {
		buf.WriteString(`"id":`)
		fflib.WriteJsonString(buf, string(mj.ID))
		buf.WriteByte(',')
	}
	if len(mj.Institutions) != 0 {
		buf.WriteString(`"institution":`)
		if mj.Institutions != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Institutions {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Imprint) != 0 {
		buf.WriteString(`"imprint":`)
		fflib.WriteJsonString(buf, string(mj.Imprint))
		buf.WriteByte(',')
	}
	if len(mj.ISSN) != 0 {
		buf.WriteString(`"issn":`)
		if mj.ISSN != nil {
			buf.WriteString(`[`)
			for i, v := range mj.ISSN {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Languages) != 0 {
		buf.WriteString(`"language":`)
		if mj.Languages != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Languages {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.MegaCollections) != 0 {
		buf.WriteString(`"mega_collection":`)
		if mj.MegaCollections != nil {
			buf.WriteString(`[`)
			for i, v := range mj.MegaCollections {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.PublishDateSort != 0 {
		buf.WriteString(`"publishDateSort":`)
		fflib.FormatBits2(buf, uint64(mj.PublishDateSort), 10, mj.PublishDateSort < 0)
		buf.WriteByte(',')
	}
	if len(mj.Publishers) != 0 {
		buf.WriteString(`"publisher":`)
		if mj.Publishers != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Publishers {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.RecordType) != 0 {
		buf.WriteString(`"recordtype":`)
		fflib.WriteJsonString(buf, string(mj.RecordType))
		buf.WriteByte(',')
	}
	if len(mj.Series) != 0 {
		buf.WriteString(`"series":`)
		if mj.Series != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Series {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SourceID) != 0 {
		buf.WriteString(`"source_id":`)
		fflib.WriteJsonString(buf, string(mj.SourceID))
		buf.WriteByte(',')
	}
	if len(mj.Subtitle) != 0 {
		buf.WriteString(`"title_sub":`)
		fflib.WriteJsonString(buf, string(mj.Subtitle))
		buf.WriteByte(',')
	}
	if len(mj.Title) != 0 {
		buf.WriteString(`"title":`)
		fflib.WriteJsonString(buf, string(mj.Title))
		buf.WriteByte(',')
	}
	if len(mj.TitleFull) != 0 {
		buf.WriteString(`"title_full":`)
		fflib.WriteJsonString(buf, string(mj.TitleFull))
		buf.WriteByte(',')
	}
	if len(mj.TitleShort) != 0 {
		buf.WriteString(`"title_short":`)
		fflib.WriteJsonString(buf, string(mj.TitleShort))
		buf.WriteByte(',')
	}
	if len(mj.TitleSort) != 0 {
		buf.WriteString(`"title_sort":`)
		fflib.WriteJsonString(buf, string(mj.TitleSort))
		buf.WriteByte(',')
	}
	if len(mj.Topics) != 0 {
		buf.WriteString(`"topic":`)
		if mj.Topics != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Topics {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.URL) != 0 {
		buf.WriteString(`"url":`)
		if mj.URL != nil {
			buf.WriteString(`[`)
			for i, v := range mj.URL {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.PublishDate) != 0 {
		buf.WriteString(`"publishDate":`)
		if mj.PublishDate != nil {
			buf.WriteString(`[`)
			for i, v := range mj.PublishDate {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.VF1Author) != 0 {
		buf.WriteString(`"vf1_author":`)
		fflib.WriteJsonString(buf, string(mj.VF1Author))
		buf.WriteByte(',')
	}
	if len(mj.VF1SecondaryAuthors) != 0 {
		buf.WriteString(`"vf1_author2":`)
		if mj.VF1SecondaryAuthors != nil {
			buf.WriteString(`[`)
			for i, v := range mj.VF1SecondaryAuthors {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.ContainerIssue) != 0 {
		buf.WriteString(`"container_issue":`)
		fflib.WriteJsonString(buf, string(mj.ContainerIssue))
		buf.WriteByte(',')
	}
	if len(mj.ContainerStartPage) != 0 {
		buf.WriteString(`"container_start_page":`)
		fflib.WriteJsonString(buf, string(mj.ContainerStartPage))
		buf.WriteByte(',')
	}
	if len(mj.ContainerTitle) != 0 {
		buf.WriteString(`"container_title":`)
		fflib.WriteJsonString(buf, string(mj.ContainerTitle))
		buf.WriteByte(',')
	}
	if len(mj.ContainerVolume) != 0 {
		buf.WriteString(`"container_volume":`)
		fflib.WriteJsonString(buf, string(mj.ContainerVolume))
		buf.WriteByte(',')
	}
	if len(mj.FormatDe105) != 0 {
		buf.WriteString(`"format_de105":`)
		if mj.FormatDe105 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDe105 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDe14) != 0 {
		buf.WriteString(`"format_de14":`)
		if mj.FormatDe14 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDe14 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDe15) != 0 {
		buf.WriteString(`"format_de15":`)
		if mj.FormatDe15 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDe15 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDe520) != 0 {
		buf.WriteString(`"format_de520":`)
		if mj.FormatDe520 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDe520 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDe540) != 0 {
		buf.WriteString(`"format_de540":`)
		if mj.FormatDe540 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDe540 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDeCh1) != 0 {
		buf.WriteString(`"format_dech1":`)
		if mj.FormatDeCh1 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDeCh1 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDed117) != 0 {
		buf.WriteString(`"format_ded117":`)
		if mj.FormatDed117 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDed117 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDeGla1) != 0 {
		buf.WriteString(`"format_degla1":`)
		if mj.FormatDeGla1 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDeGla1 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDel152) != 0 {
		buf.WriteString(`"format_del152":`)
		if mj.FormatDel152 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDel152 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDel189) != 0 {
		buf.WriteString(`"format_del189":`)
		if mj.FormatDel189 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDel189 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDeZi4) != 0 {
		buf.WriteString(`"format_dezi4":`)
		if mj.FormatDeZi4 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDeZi4 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.FormatDeZwi2) != 0 {
		buf.WriteString(`"format_dezwi2":`)
		if mj.FormatDeZwi2 != nil {
			buf.WriteString(`[`)
			for i, v := range mj.FormatDeZwi2 {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Solr5Vufind3v12base = iota
	ffj_t_Solr5Vufind3v12no_such_key

	ffj_t_Solr5Vufind3v12_AccessFacet

	ffj_t_Solr5Vufind3v12_AuthorFacet

	ffj_t_Solr5Vufind3v12_Authors

	ffj_t_Solr5Vufind3v12_SecondaryAuthors

	ffj_t_Solr5Vufind3v12_Allfields

	ffj_t_Solr5Vufind3v12_FincClassFacet

	ffj_t_Solr5Vufind3v12_Formats

	ffj_t_Solr5Vufind3v12_Fullrecord

	ffj_t_Solr5Vufind3v12_Fulltext

	ffj_t_Solr5Vufind3v12_HierarchyParentTitle

	ffj_t_Solr5Vufind3v12_ID

	ffj_t_Solr5Vufind3v12_Institutions

	ffj_t_Solr5Vufind3v12_Imprint

	ffj_t_Solr5Vufind3v12_ISSN

	ffj_t_Solr5Vufind3v12_Languages

	ffj_t_Solr5Vufind3v12_MegaCollections

	ffj_t_Solr5Vufind3v12_PublishDateSort

	ffj_t_Solr5Vufind3v12_Publishers

	ffj_t_Solr5Vufind3v12_RecordType

	ffj_t_Solr5Vufind3v12_Series

	ffj_t_Solr5Vufind3v12_SourceID

	ffj_t_Solr5Vufind3v12_Subtitle

	ffj_t_Solr5Vufind3v12_Title

	ffj_t_Solr5Vufind3v12_TitleFull

	ffj_t_Solr5Vufind3v12_TitleShort

	ffj_t_Solr5Vufind3v12_TitleSort

	ffj_t_Solr5Vufind3v12_Topics

	ffj_t_Solr5Vufind3v12_URL

	ffj_t_Solr5Vufind3v12_PublishDate

	ffj_t_Solr5Vufind3v12_VF1Author

	ffj_t_Solr5Vufind3v12_VF1SecondaryAuthors

	ffj_t_Solr5Vufind3v12_ContainerIssue

	ffj_t_Solr5Vufind3v12_ContainerStartPage

	ffj_t_Solr5Vufind3v12_ContainerTitle

	ffj_t_Solr5Vufind3v12_ContainerVolume

	ffj_t_Solr5Vufind3v12_FormatDe105

	ffj_t_Solr5Vufind3v12_FormatDe14

	ffj_t_Solr5Vufind3v12_FormatDe15

	ffj_t_Solr5Vufind3v12_FormatDe520

	ffj_t_Solr5Vufind3v12_FormatDe540

	ffj_t_Solr5Vufind3v12_FormatDeCh1

	ffj_t_Solr5Vufind3v12_FormatDed117

	ffj_t_Solr5Vufind3v12_FormatDeGla1

	ffj_t_Solr5Vufind3v12_FormatDel152

	ffj_t_Solr5Vufind3v12_FormatDel189

	ffj_t_Solr5Vufind3v12_FormatDeZi4

	ffj_t_Solr5Vufind3v12_FormatDeZwi2
)

var ffj_key_Solr5Vufind3v12_AccessFacet = []byte("access_facet")

var ffj_key_Solr5Vufind3v12_AuthorFacet = []byte("author_facet")

var ffj_key_Solr5Vufind3v12_Authors = []byte("author")

var ffj_key_Solr5Vufind3v12_SecondaryAuthors = []byte("author2")

var ffj_key_Solr5Vufind3v12_Allfields = []byte("allfields")

var ffj_key_Solr5Vufind3v12_FincClassFacet = []byte("finc_class_facet")

var ffj_key_Solr5Vufind3v12_Formats = []byte("format")

var ffj_key_Solr5Vufind3v12_Fullrecord = []byte("fullrecord")

var ffj_key_Solr5Vufind3v12_Fulltext = []byte("fulltext")

var ffj_key_Solr5Vufind3v12_HierarchyParentTitle = []byte("hierarchy_parent_title")

var ffj_key_Solr5Vufind3v12_ID = []byte("id")

var ffj_key_Solr5Vufind3v12_Institutions = []byte("institution")

var ffj_key_Solr5Vufind3v12_Imprint = []byte("imprint")

var ffj_key_Solr5Vufind3v12_ISSN = []byte("issn")

var ffj_key_Solr5Vufind3v12_Languages = []byte("language")

var ffj_key_Solr5Vufind3v12_MegaCollections = []byte("mega_collection")

var ffj_key_Solr5Vufind3v12_PublishDateSort = []byte("publishDateSort")

var ffj_key_Solr5Vufind3v12_Publishers = []byte("publisher")

var ffj_key_Solr5Vufind3v12_RecordType = []byte("recordtype")

var ffj_key_Solr5Vufind3v12_Series = []byte("series")

var ffj_key_Solr5Vufind3v12_SourceID = []byte("source_id")

var ffj_key_Solr5Vufind3v12_Subtitle = []byte("title_sub")

var ffj_key_Solr5Vufind3v12_Title = []byte("title")

var ffj_key_Solr5Vufind3v12_TitleFull = []byte("title_full")

var ffj_key_Solr5Vufind3v12_TitleShort = []byte("title_short")

var ffj_key_Solr5Vufind3v12_TitleSort = []byte("title_sort")

var ffj_key_Solr5Vufind3v12_Topics = []byte("topic")

var ffj_key_Solr5Vufind3v12_URL = []byte("url")

var ffj_key_Solr5Vufind3v12_PublishDate = []byte("publishDate")

var ffj_key_Solr5Vufind3v12_VF1Author = []byte("vf1_author")

var ffj_key_Solr5Vufind3v12_VF1SecondaryAuthors = []byte("vf1_author2")

var ffj_key_Solr5Vufind3v12_ContainerIssue = []byte("container_issue")

var ffj_key_Solr5Vufind3v12_ContainerStartPage = []byte("container_start_page")

var ffj_key_Solr5Vufind3v12_ContainerTitle = []byte("container_title")

var ffj_key_Solr5Vufind3v12_ContainerVolume = []byte("container_volume")

var ffj_key_Solr5Vufind3v12_FormatDe105 = []byte("format_de105")

var ffj_key_Solr5Vufind3v12_FormatDe14 = []byte("format_de14")

var ffj_key_Solr5Vufind3v12_FormatDe15 = []byte("format_de15")

var ffj_key_Solr5Vufind3v12_FormatDe520 = []byte("format_de520")

var ffj_key_Solr5Vufind3v12_FormatDe540 = []byte("format_de540")

var ffj_key_Solr5Vufind3v12_FormatDeCh1 = []byte("format_dech1")

var ffj_key_Solr5Vufind3v12_FormatDed117 = []byte("format_ded117")

var ffj_key_Solr5Vufind3v12_FormatDeGla1 = []byte("format_degla1")

var ffj_key_Solr5Vufind3v12_FormatDel152 = []byte("format_del152")

var ffj_key_Solr5Vufind3v12_FormatDel189 = []byte("format_del189")

var ffj_key_Solr5Vufind3v12_FormatDeZi4 = []byte("format_dezi4")

var ffj_key_Solr5Vufind3v12_FormatDeZwi2 = []byte("format_dezwi2")

func (uj *Solr5Vufind3v12) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Solr5Vufind3v12) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Solr5Vufind3v12base
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Solr5Vufind3v12no_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_AccessFacet, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_AccessFacet
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_AuthorFacet, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_AuthorFacet
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Authors, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Authors
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_SecondaryAuthors, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_SecondaryAuthors
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Allfields, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Allfields
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_ContainerIssue, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ContainerIssue
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_ContainerStartPage, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ContainerStartPage
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_ContainerTitle, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ContainerTitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_ContainerVolume, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ContainerVolume
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_FincClassFacet, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FincClassFacet
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Formats, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Formats
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Fullrecord, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Fullrecord
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Fulltext, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Fulltext
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDe105, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDe105
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDe14, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDe14
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDe15, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDe15
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDe520, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDe520
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDe540, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDe540
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDeCh1, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDeCh1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDed117, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDed117
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDeGla1, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDeGla1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDel152, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDel152
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDel189, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDel189
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDeZi4, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDeZi4
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_FormatDeZwi2, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_FormatDeZwi2
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_HierarchyParentTitle, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_HierarchyParentTitle
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_ID, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Institutions, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Institutions
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Imprint, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Imprint
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_ISSN, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_ISSN
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_Languages, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Languages
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_MegaCollections, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_MegaCollections
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_PublishDateSort, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_PublishDateSort
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Publishers, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Publishers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_PublishDate, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_PublishDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_RecordType, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_RecordType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_Series, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Series
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_SourceID, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_SourceID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_Subtitle, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Subtitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Title, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Title
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_TitleFull, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_TitleFull
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_TitleShort, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_TitleShort
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_TitleSort, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_TitleSort
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_Topics, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_Topics
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_URL, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_URL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_Solr5Vufind3v12_VF1Author, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_VF1Author
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Solr5Vufind3v12_VF1SecondaryAuthors, kn) {
						currentKey = ffj_t_Solr5Vufind3v12_VF1SecondaryAuthors
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDeZwi2, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDeZwi2
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDeZi4, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDeZi4
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDel189, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDel189
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDel152, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDel152
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDeGla1, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDeGla1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDed117, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDed117
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDeCh1, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDeCh1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDe540, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDe540
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDe520, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDe520
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDe15, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDe15
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDe14, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDe14
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_FormatDe105, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FormatDe105
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_ContainerVolume, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ContainerVolume
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_ContainerTitle, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ContainerTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_ContainerStartPage, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ContainerStartPage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_ContainerIssue, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ContainerIssue
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_VF1SecondaryAuthors, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_VF1SecondaryAuthors
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_VF1Author, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_VF1Author
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_PublishDate, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_PublishDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_URL, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_URL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Topics, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Topics
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_TitleSort, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_TitleSort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_TitleShort, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_TitleShort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_TitleFull, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_TitleFull
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Title, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Title
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_Subtitle, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Subtitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_SourceID, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_SourceID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_Series, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Series
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_RecordType, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_RecordType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_Publishers, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Publishers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_PublishDateSort, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_PublishDateSort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_MegaCollections, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_MegaCollections
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Languages, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Languages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_ISSN, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ISSN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Imprint, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Imprint
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_Institutions, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Institutions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_ID, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_HierarchyParentTitle, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_HierarchyParentTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Fulltext, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Fulltext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Fullrecord, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Fullrecord
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Formats, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Formats
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_FincClassFacet, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_FincClassFacet
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_Allfields, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Allfields
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_SecondaryAuthors, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_SecondaryAuthors
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Solr5Vufind3v12_Authors, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_Authors
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Solr5Vufind3v12_AuthorFacet, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_AuthorFacet
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Solr5Vufind3v12_AccessFacet, kn) {
					currentKey = ffj_t_Solr5Vufind3v12_AccessFacet
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Solr5Vufind3v12no_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Solr5Vufind3v12_AccessFacet:
					goto handle_AccessFacet

				case ffj_t_Solr5Vufind3v12_AuthorFacet:
					goto handle_AuthorFacet

				case ffj_t_Solr5Vufind3v12_Authors:
					goto handle_Authors

				case ffj_t_Solr5Vufind3v12_SecondaryAuthors:
					goto handle_SecondaryAuthors

				case ffj_t_Solr5Vufind3v12_Allfields:
					goto handle_Allfields

				case ffj_t_Solr5Vufind3v12_FincClassFacet:
					goto handle_FincClassFacet

				case ffj_t_Solr5Vufind3v12_Formats:
					goto handle_Formats

				case ffj_t_Solr5Vufind3v12_Fullrecord:
					goto handle_Fullrecord

				case ffj_t_Solr5Vufind3v12_Fulltext:
					goto handle_Fulltext

				case ffj_t_Solr5Vufind3v12_HierarchyParentTitle:
					goto handle_HierarchyParentTitle

				case ffj_t_Solr5Vufind3v12_ID:
					goto handle_ID

				case ffj_t_Solr5Vufind3v12_Institutions:
					goto handle_Institutions

				case ffj_t_Solr5Vufind3v12_Imprint:
					goto handle_Imprint

				case ffj_t_Solr5Vufind3v12_ISSN:
					goto handle_ISSN

				case ffj_t_Solr5Vufind3v12_Languages:
					goto handle_Languages

				case ffj_t_Solr5Vufind3v12_MegaCollections:
					goto handle_MegaCollections

				case ffj_t_Solr5Vufind3v12_PublishDateSort:
					goto handle_PublishDateSort

				case ffj_t_Solr5Vufind3v12_Publishers:
					goto handle_Publishers

				case ffj_t_Solr5Vufind3v12_RecordType:
					goto handle_RecordType

				case ffj_t_Solr5Vufind3v12_Series:
					goto handle_Series

				case ffj_t_Solr5Vufind3v12_SourceID:
					goto handle_SourceID

				case ffj_t_Solr5Vufind3v12_Subtitle:
					goto handle_Subtitle

				case ffj_t_Solr5Vufind3v12_Title:
					goto handle_Title

				case ffj_t_Solr5Vufind3v12_TitleFull:
					goto handle_TitleFull

				case ffj_t_Solr5Vufind3v12_TitleShort:
					goto handle_TitleShort

				case ffj_t_Solr5Vufind3v12_TitleSort:
					goto handle_TitleSort

				case ffj_t_Solr5Vufind3v12_Topics:
					goto handle_Topics

				case ffj_t_Solr5Vufind3v12_URL:
					goto handle_URL

				case ffj_t_Solr5Vufind3v12_PublishDate:
					goto handle_PublishDate

				case ffj_t_Solr5Vufind3v12_VF1Author:
					goto handle_VF1Author

				case ffj_t_Solr5Vufind3v12_VF1SecondaryAuthors:
					goto handle_VF1SecondaryAuthors

				case ffj_t_Solr5Vufind3v12_ContainerIssue:
					goto handle_ContainerIssue

				case ffj_t_Solr5Vufind3v12_ContainerStartPage:
					goto handle_ContainerStartPage

				case ffj_t_Solr5Vufind3v12_ContainerTitle:
					goto handle_ContainerTitle

				case ffj_t_Solr5Vufind3v12_ContainerVolume:
					goto handle_ContainerVolume

				case ffj_t_Solr5Vufind3v12_FormatDe105:
					goto handle_FormatDe105

				case ffj_t_Solr5Vufind3v12_FormatDe14:
					goto handle_FormatDe14

				case ffj_t_Solr5Vufind3v12_FormatDe15:
					goto handle_FormatDe15

				case ffj_t_Solr5Vufind3v12_FormatDe520:
					goto handle_FormatDe520

				case ffj_t_Solr5Vufind3v12_FormatDe540:
					goto handle_FormatDe540

				case ffj_t_Solr5Vufind3v12_FormatDeCh1:
					goto handle_FormatDeCh1

				case ffj_t_Solr5Vufind3v12_FormatDed117:
					goto handle_FormatDed117

				case ffj_t_Solr5Vufind3v12_FormatDeGla1:
					goto handle_FormatDeGla1

				case ffj_t_Solr5Vufind3v12_FormatDel152:
					goto handle_FormatDel152

				case ffj_t_Solr5Vufind3v12_FormatDel189:
					goto handle_FormatDel189

				case ffj_t_Solr5Vufind3v12_FormatDeZi4:
					goto handle_FormatDeZi4

				case ffj_t_Solr5Vufind3v12_FormatDeZwi2:
					goto handle_FormatDeZwi2

				case ffj_t_Solr5Vufind3v12no_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_AccessFacet:

	/* handler: uj.AccessFacet type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.AccessFacet = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuthorFacet:

	/* handler: uj.AuthorFacet type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.AuthorFacet = nil
		} else {

			uj.AuthorFacet = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__AuthorFacet string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__AuthorFacet type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__AuthorFacet = string(string(outBuf))

					}
				}

				uj.AuthorFacet = append(uj.AuthorFacet, tmp_uj__AuthorFacet)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Authors:

	/* handler: uj.Authors type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Authors = nil
		} else {

			uj.Authors = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Authors string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Authors type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Authors = string(string(outBuf))

					}
				}

				uj.Authors = append(uj.Authors, tmp_uj__Authors)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SecondaryAuthors:

	/* handler: uj.SecondaryAuthors type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.SecondaryAuthors = nil
		} else {

			uj.SecondaryAuthors = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__SecondaryAuthors string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__SecondaryAuthors type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__SecondaryAuthors = string(string(outBuf))

					}
				}

				uj.SecondaryAuthors = append(uj.SecondaryAuthors, tmp_uj__SecondaryAuthors)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Allfields:

	/* handler: uj.Allfields type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Allfields = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FincClassFacet:

	/* handler: uj.FincClassFacet type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FincClassFacet = nil
		} else {

			uj.FincClassFacet = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FincClassFacet string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FincClassFacet type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FincClassFacet = string(string(outBuf))

					}
				}

				uj.FincClassFacet = append(uj.FincClassFacet, tmp_uj__FincClassFacet)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Formats:

	/* handler: uj.Formats type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Formats = nil
		} else {

			uj.Formats = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Formats string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Formats type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Formats = string(string(outBuf))

					}
				}

				uj.Formats = append(uj.Formats, tmp_uj__Formats)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fullrecord:

	/* handler: uj.Fullrecord type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Fullrecord = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fulltext:

	/* handler: uj.Fulltext type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Fulltext = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_HierarchyParentTitle:

	/* handler: uj.HierarchyParentTitle type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.HierarchyParentTitle = nil
		} else {

			uj.HierarchyParentTitle = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__HierarchyParentTitle string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__HierarchyParentTitle type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__HierarchyParentTitle = string(string(outBuf))

					}
				}

				uj.HierarchyParentTitle = append(uj.HierarchyParentTitle, tmp_uj__HierarchyParentTitle)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Institutions:

	/* handler: uj.Institutions type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Institutions = nil
		} else {

			uj.Institutions = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Institutions string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Institutions type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Institutions = string(string(outBuf))

					}
				}

				uj.Institutions = append(uj.Institutions, tmp_uj__Institutions)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Imprint:

	/* handler: uj.Imprint type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Imprint = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ISSN:

	/* handler: uj.ISSN type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.ISSN = nil
		} else {

			uj.ISSN = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__ISSN string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__ISSN type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__ISSN = string(string(outBuf))

					}
				}

				uj.ISSN = append(uj.ISSN, tmp_uj__ISSN)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Languages:

	/* handler: uj.Languages type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Languages = nil
		} else {

			uj.Languages = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Languages string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Languages type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Languages = string(string(outBuf))

					}
				}

				uj.Languages = append(uj.Languages, tmp_uj__Languages)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MegaCollections:

	/* handler: uj.MegaCollections type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.MegaCollections = nil
		} else {

			uj.MegaCollections = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__MegaCollections string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__MegaCollections type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__MegaCollections = string(string(outBuf))

					}
				}

				uj.MegaCollections = append(uj.MegaCollections, tmp_uj__MegaCollections)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PublishDateSort:

	/* handler: uj.PublishDateSort type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PublishDateSort = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publishers:

	/* handler: uj.Publishers type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Publishers = nil
		} else {

			uj.Publishers = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Publishers string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Publishers type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Publishers = string(string(outBuf))

					}
				}

				uj.Publishers = append(uj.Publishers, tmp_uj__Publishers)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RecordType:

	/* handler: uj.RecordType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.RecordType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Series:

	/* handler: uj.Series type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Series = nil
		} else {

			uj.Series = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Series string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Series type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Series = string(string(outBuf))

					}
				}

				uj.Series = append(uj.Series, tmp_uj__Series)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SourceID:

	/* handler: uj.SourceID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SourceID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Subtitle:

	/* handler: uj.Subtitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Subtitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Title:

	/* handler: uj.Title type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Title = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TitleFull:

	/* handler: uj.TitleFull type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TitleFull = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TitleShort:

	/* handler: uj.TitleShort type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TitleShort = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TitleSort:

	/* handler: uj.TitleSort type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.TitleSort = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Topics:

	/* handler: uj.Topics type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Topics = nil
		} else {

			uj.Topics = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Topics string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Topics type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Topics = string(string(outBuf))

					}
				}

				uj.Topics = append(uj.Topics, tmp_uj__Topics)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: uj.URL type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.URL = nil
		} else {

			uj.URL = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__URL string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__URL type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__URL = string(string(outBuf))

					}
				}

				uj.URL = append(uj.URL, tmp_uj__URL)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PublishDate:

	/* handler: uj.PublishDate type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PublishDate = nil
		} else {

			uj.PublishDate = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__PublishDate string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PublishDate type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__PublishDate = string(string(outBuf))

					}
				}

				uj.PublishDate = append(uj.PublishDate, tmp_uj__PublishDate)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VF1Author:

	/* handler: uj.VF1Author type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.VF1Author = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VF1SecondaryAuthors:

	/* handler: uj.VF1SecondaryAuthors type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.VF1SecondaryAuthors = nil
		} else {

			uj.VF1SecondaryAuthors = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__VF1SecondaryAuthors string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__VF1SecondaryAuthors type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__VF1SecondaryAuthors = string(string(outBuf))

					}
				}

				uj.VF1SecondaryAuthors = append(uj.VF1SecondaryAuthors, tmp_uj__VF1SecondaryAuthors)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContainerIssue:

	/* handler: uj.ContainerIssue type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ContainerIssue = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContainerStartPage:

	/* handler: uj.ContainerStartPage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ContainerStartPage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContainerTitle:

	/* handler: uj.ContainerTitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ContainerTitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContainerVolume:

	/* handler: uj.ContainerVolume type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ContainerVolume = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDe105:

	/* handler: uj.FormatDe105 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDe105 = nil
		} else {

			uj.FormatDe105 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDe105 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDe105 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDe105 = string(string(outBuf))

					}
				}

				uj.FormatDe105 = append(uj.FormatDe105, tmp_uj__FormatDe105)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDe14:

	/* handler: uj.FormatDe14 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDe14 = nil
		} else {

			uj.FormatDe14 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDe14 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDe14 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDe14 = string(string(outBuf))

					}
				}

				uj.FormatDe14 = append(uj.FormatDe14, tmp_uj__FormatDe14)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDe15:

	/* handler: uj.FormatDe15 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDe15 = nil
		} else {

			uj.FormatDe15 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDe15 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDe15 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDe15 = string(string(outBuf))

					}
				}

				uj.FormatDe15 = append(uj.FormatDe15, tmp_uj__FormatDe15)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDe520:

	/* handler: uj.FormatDe520 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDe520 = nil
		} else {

			uj.FormatDe520 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDe520 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDe520 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDe520 = string(string(outBuf))

					}
				}

				uj.FormatDe520 = append(uj.FormatDe520, tmp_uj__FormatDe520)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDe540:

	/* handler: uj.FormatDe540 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDe540 = nil
		} else {

			uj.FormatDe540 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDe540 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDe540 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDe540 = string(string(outBuf))

					}
				}

				uj.FormatDe540 = append(uj.FormatDe540, tmp_uj__FormatDe540)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDeCh1:

	/* handler: uj.FormatDeCh1 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDeCh1 = nil
		} else {

			uj.FormatDeCh1 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDeCh1 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDeCh1 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDeCh1 = string(string(outBuf))

					}
				}

				uj.FormatDeCh1 = append(uj.FormatDeCh1, tmp_uj__FormatDeCh1)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDed117:

	/* handler: uj.FormatDed117 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDed117 = nil
		} else {

			uj.FormatDed117 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDed117 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDed117 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDed117 = string(string(outBuf))

					}
				}

				uj.FormatDed117 = append(uj.FormatDed117, tmp_uj__FormatDed117)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDeGla1:

	/* handler: uj.FormatDeGla1 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDeGla1 = nil
		} else {

			uj.FormatDeGla1 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDeGla1 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDeGla1 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDeGla1 = string(string(outBuf))

					}
				}

				uj.FormatDeGla1 = append(uj.FormatDeGla1, tmp_uj__FormatDeGla1)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDel152:

	/* handler: uj.FormatDel152 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDel152 = nil
		} else {

			uj.FormatDel152 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDel152 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDel152 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDel152 = string(string(outBuf))

					}
				}

				uj.FormatDel152 = append(uj.FormatDel152, tmp_uj__FormatDel152)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDel189:

	/* handler: uj.FormatDel189 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDel189 = nil
		} else {

			uj.FormatDel189 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDel189 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDel189 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDel189 = string(string(outBuf))

					}
				}

				uj.FormatDel189 = append(uj.FormatDel189, tmp_uj__FormatDel189)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDeZi4:

	/* handler: uj.FormatDeZi4 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDeZi4 = nil
		} else {

			uj.FormatDeZi4 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDeZi4 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDeZi4 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDeZi4 = string(string(outBuf))

					}
				}

				uj.FormatDeZi4 = append(uj.FormatDeZi4, tmp_uj__FormatDeZi4)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormatDeZwi2:

	/* handler: uj.FormatDeZwi2 type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.FormatDeZwi2 = nil
		} else {

			uj.FormatDeZwi2 = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__FormatDeZwi2 string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__FormatDeZwi2 type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__FormatDeZwi2 = string(string(outBuf))

					}
				}

				uj.FormatDeZwi2 = append(uj.FormatDeZwi2, tmp_uj__FormatDeZwi2)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

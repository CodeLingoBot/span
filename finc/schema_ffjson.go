// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: finc/schema.go
// DO NOT EDIT!

package finc

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Author) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Author) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.ID) != 0 {
		buf.WriteString(`"x.id":`)
		fflib.WriteJsonString(buf, string(mj.ID))
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"rft.au":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.LastName) != 0 {
		buf.WriteString(`"rft.aulast":`)
		fflib.WriteJsonString(buf, string(mj.LastName))
		buf.WriteByte(',')
	}
	if len(mj.FirstName) != 0 {
		buf.WriteString(`"rft.aufirst":`)
		fflib.WriteJsonString(buf, string(mj.FirstName))
		buf.WriteByte(',')
	}
	if len(mj.Initial) != 0 {
		buf.WriteString(`"rft.auinit":`)
		fflib.WriteJsonString(buf, string(mj.Initial))
		buf.WriteByte(',')
	}
	if len(mj.FirstInitial) != 0 {
		buf.WriteString(`"rft.auinit1":`)
		fflib.WriteJsonString(buf, string(mj.FirstInitial))
		buf.WriteByte(',')
	}
	if len(mj.MiddleName) != 0 {
		buf.WriteString(`"rft.auinitm":`)
		fflib.WriteJsonString(buf, string(mj.MiddleName))
		buf.WriteByte(',')
	}
	if len(mj.Suffix) != 0 {
		buf.WriteString(`"rft.ausuffix":`)
		fflib.WriteJsonString(buf, string(mj.Suffix))
		buf.WriteByte(',')
	}
	if len(mj.Corporation) != 0 {
		buf.WriteString(`"rft.aucorp":`)
		fflib.WriteJsonString(buf, string(mj.Corporation))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Authorbase = iota
	ffj_t_Authorno_such_key

	ffj_t_Author_ID

	ffj_t_Author_Name

	ffj_t_Author_LastName

	ffj_t_Author_FirstName

	ffj_t_Author_Initial

	ffj_t_Author_FirstInitial

	ffj_t_Author_MiddleName

	ffj_t_Author_Suffix

	ffj_t_Author_Corporation
)

var ffj_key_Author_ID = []byte("x.id")

var ffj_key_Author_Name = []byte("rft.au")

var ffj_key_Author_LastName = []byte("rft.aulast")

var ffj_key_Author_FirstName = []byte("rft.aufirst")

var ffj_key_Author_Initial = []byte("rft.auinit")

var ffj_key_Author_FirstInitial = []byte("rft.auinit1")

var ffj_key_Author_MiddleName = []byte("rft.auinitm")

var ffj_key_Author_Suffix = []byte("rft.ausuffix")

var ffj_key_Author_Corporation = []byte("rft.aucorp")

func (uj *Author) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Author) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Authorbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Authorno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'r':

					if bytes.Equal(ffj_key_Author_Name, kn) {
						currentKey = ffj_t_Author_Name
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_LastName, kn) {
						currentKey = ffj_t_Author_LastName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_FirstName, kn) {
						currentKey = ffj_t_Author_FirstName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_Initial, kn) {
						currentKey = ffj_t_Author_Initial
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_FirstInitial, kn) {
						currentKey = ffj_t_Author_FirstInitial
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_MiddleName, kn) {
						currentKey = ffj_t_Author_MiddleName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_Suffix, kn) {
						currentKey = ffj_t_Author_Suffix
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Author_Corporation, kn) {
						currentKey = ffj_t_Author_Corporation
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'x':

					if bytes.Equal(ffj_key_Author_ID, kn) {
						currentKey = ffj_t_Author_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffj_key_Author_Corporation, kn) {
					currentKey = ffj_t_Author_Corporation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Author_Suffix, kn) {
					currentKey = ffj_t_Author_Suffix
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Author_MiddleName, kn) {
					currentKey = ffj_t_Author_MiddleName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Author_FirstInitial, kn) {
					currentKey = ffj_t_Author_FirstInitial
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Author_Initial, kn) {
					currentKey = ffj_t_Author_Initial
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Author_FirstName, kn) {
					currentKey = ffj_t_Author_FirstName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Author_LastName, kn) {
					currentKey = ffj_t_Author_LastName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Author_Name, kn) {
					currentKey = ffj_t_Author_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Author_ID, kn) {
					currentKey = ffj_t_Author_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Authorno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Author_ID:
					goto handle_ID

				case ffj_t_Author_Name:
					goto handle_Name

				case ffj_t_Author_LastName:
					goto handle_LastName

				case ffj_t_Author_FirstName:
					goto handle_FirstName

				case ffj_t_Author_Initial:
					goto handle_Initial

				case ffj_t_Author_FirstInitial:
					goto handle_FirstInitial

				case ffj_t_Author_MiddleName:
					goto handle_MiddleName

				case ffj_t_Author_Suffix:
					goto handle_Suffix

				case ffj_t_Author_Corporation:
					goto handle_Corporation

				case ffj_t_Authorno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastName:

	/* handler: uj.LastName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.LastName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FirstName:

	/* handler: uj.FirstName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FirstName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Initial:

	/* handler: uj.Initial type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Initial = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FirstInitial:

	/* handler: uj.FirstInitial type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FirstInitial = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MiddleName:

	/* handler: uj.MiddleName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MiddleName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Suffix:

	/* handler: uj.Suffix type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Suffix = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Corporation:

	/* handler: uj.Corporation type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Corporation = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *IntermediateSchema) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *IntermediateSchema) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Format) != 0 {
		buf.WriteString(`"finc.format":`)
		fflib.WriteJsonString(buf, string(mj.Format))
		buf.WriteByte(',')
	}
	if len(mj.MegaCollection) != 0 {
		buf.WriteString(`"finc.mega_collection":`)
		fflib.WriteJsonString(buf, string(mj.MegaCollection))
		buf.WriteByte(',')
	}
	if len(mj.RecordID) != 0 {
		buf.WriteString(`"finc.record_id":`)
		fflib.WriteJsonString(buf, string(mj.RecordID))
		buf.WriteByte(',')
	}
	if len(mj.SourceID) != 0 {
		buf.WriteString(`"finc.source_id":`)
		fflib.WriteJsonString(buf, string(mj.SourceID))
		buf.WriteByte(',')
	}
	if len(mj.Database) != 0 {
		buf.WriteString(`"ris.db":`)
		fflib.WriteJsonString(buf, string(mj.Database))
		buf.WriteByte(',')
	}
	if len(mj.DataProvider) != 0 {
		buf.WriteString(`"ris.dp":`)
		fflib.WriteJsonString(buf, string(mj.DataProvider))
		buf.WriteByte(',')
	}
	if len(mj.RefType) != 0 {
		buf.WriteString(`"ris.type":`)
		fflib.WriteJsonString(buf, string(mj.RefType))
		buf.WriteByte(',')
	}
	if len(mj.ArticleNumber) != 0 {
		buf.WriteString(`"rft.artnum":`)
		fflib.WriteJsonString(buf, string(mj.ArticleNumber))
		buf.WriteByte(',')
	}
	if len(mj.ArticleTitle) != 0 {
		buf.WriteString(`"rft.atitle":`)
		fflib.WriteJsonString(buf, string(mj.ArticleTitle))
		buf.WriteByte(',')
	}
	if len(mj.BookTitle) != 0 {
		buf.WriteString(`"rft.btitle":`)
		fflib.WriteJsonString(buf, string(mj.BookTitle))
		buf.WriteByte(',')
	}
	if len(mj.Chronology) != 0 {
		buf.WriteString(`"rft.chron":`)
		fflib.WriteJsonString(buf, string(mj.Chronology))
		buf.WriteByte(',')
	}
	if len(mj.Edition) != 0 {
		buf.WriteString(`"rft.edition":`)
		fflib.WriteJsonString(buf, string(mj.Edition))
		buf.WriteByte(',')
	}
	if len(mj.EISBN) != 0 {
		buf.WriteString(`"rft.isbn":`)
		if mj.EISBN != nil {
			buf.WriteString(`[`)
			for i, v := range mj.EISBN {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.EISSN) != 0 {
		buf.WriteString(`"rft.eissn":`)
		if mj.EISSN != nil {
			buf.WriteString(`[`)
			for i, v := range mj.EISSN {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.EndPage) != 0 {
		buf.WriteString(`"rft.epage":`)
		fflib.WriteJsonString(buf, string(mj.EndPage))
		buf.WriteByte(',')
	}
	if len(mj.Genre) != 0 {
		buf.WriteString(`"rft.genre":`)
		fflib.WriteJsonString(buf, string(mj.Genre))
		buf.WriteByte(',')
	}
	if len(mj.ISBN) != 0 {
		buf.WriteString(`"rft.isbn":`)
		if mj.ISBN != nil {
			buf.WriteString(`[`)
			for i, v := range mj.ISBN {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.ISSN) != 0 {
		buf.WriteString(`"rft.issn":`)
		if mj.ISSN != nil {
			buf.WriteString(`[`)
			for i, v := range mj.ISSN {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Issue) != 0 {
		buf.WriteString(`"rft.issue":`)
		fflib.WriteJsonString(buf, string(mj.Issue))
		buf.WriteByte(',')
	}
	if len(mj.JournalTitle) != 0 {
		buf.WriteString(`"rft.jtitle":`)
		fflib.WriteJsonString(buf, string(mj.JournalTitle))
		buf.WriteByte(',')
	}
	if len(mj.PageCount) != 0 {
		buf.WriteString(`"rft.tpages":`)
		fflib.WriteJsonString(buf, string(mj.PageCount))
		buf.WriteByte(',')
	}
	if len(mj.Pages) != 0 {
		buf.WriteString(`"rft.pages":`)
		fflib.WriteJsonString(buf, string(mj.Pages))
		buf.WriteByte(',')
	}
	if len(mj.Part) != 0 {
		buf.WriteString(`"rft.part":`)
		fflib.WriteJsonString(buf, string(mj.Part))
		buf.WriteByte(',')
	}
	if len(mj.Places) != 0 {
		buf.WriteString(`"rft.place":`)
		if mj.Places != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Places {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Publishers) != 0 {
		buf.WriteString(`"rft.pub":`)
		if mj.Publishers != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Publishers {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Quarter) != 0 {
		buf.WriteString(`"rft.quarter":`)
		fflib.WriteJsonString(buf, string(mj.Quarter))
		buf.WriteByte(',')
	}
	if len(mj.RawDate) != 0 {
		buf.WriteString(`"rft.date":`)
		fflib.WriteJsonString(buf, string(mj.RawDate))
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"x.date":`)

		{

			obj, err = mj.Date.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if len(mj.Season) != 0 {
		buf.WriteString(`"rft.ssn":`)
		fflib.WriteJsonString(buf, string(mj.Season))
		buf.WriteByte(',')
	}
	if len(mj.Series) != 0 {
		buf.WriteString(`"rft.series":`)
		fflib.WriteJsonString(buf, string(mj.Series))
		buf.WriteByte(',')
	}
	if len(mj.ShortTitle) != 0 {
		buf.WriteString(`"rft.stitle":`)
		fflib.WriteJsonString(buf, string(mj.ShortTitle))
		buf.WriteByte(',')
	}
	if len(mj.StartPage) != 0 {
		buf.WriteString(`"rft.spage":`)
		fflib.WriteJsonString(buf, string(mj.StartPage))
		buf.WriteByte(',')
	}
	if len(mj.Volume) != 0 {
		buf.WriteString(`"rft.volume":`)
		fflib.WriteJsonString(buf, string(mj.Volume))
		buf.WriteByte(',')
	}
	if len(mj.Abstract) != 0 {
		buf.WriteString(`"abstract":`)
		fflib.WriteJsonString(buf, string(mj.Abstract))
		buf.WriteByte(',')
	}
	if len(mj.Authors) != 0 {
		buf.WriteString(`"authors":`)
		if mj.Authors != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Authors {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.DOI) != 0 {
		buf.WriteString(`"doi":`)
		fflib.WriteJsonString(buf, string(mj.DOI))
		buf.WriteByte(',')
	}
	if len(mj.Languages) != 0 {
		buf.WriteString(`"languages":`)
		if mj.Languages != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Languages {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.URL) != 0 {
		buf.WriteString(`"url":`)
		if mj.URL != nil {
			buf.WriteString(`[`)
			for i, v := range mj.URL {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Version) != 0 {
		buf.WriteString(`"version":`)
		fflib.WriteJsonString(buf, string(mj.Version))
		buf.WriteByte(',')
	}
	if len(mj.ArticleSubtitle) != 0 {
		buf.WriteString(`"x.subtitle":`)
		fflib.WriteJsonString(buf, string(mj.ArticleSubtitle))
		buf.WriteByte(',')
	}
	if len(mj.Fulltext) != 0 {
		buf.WriteString(`"x.fulltext":`)
		fflib.WriteJsonString(buf, string(mj.Fulltext))
		buf.WriteByte(',')
	}
	if len(mj.Headings) != 0 {
		buf.WriteString(`"x.headings":`)
		if mj.Headings != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Headings {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Subjects) != 0 {
		buf.WriteString(`"x.subjects":`)
		if mj.Subjects != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Subjects {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Type) != 0 {
		buf.WriteString(`"x.type":`)
		fflib.WriteJsonString(buf, string(mj.Type))
		buf.WriteByte(',')
	}
	if len(mj.Indicator) != 0 {
		buf.WriteString(`"x.indicator":`)
		fflib.WriteJsonString(buf, string(mj.Indicator))
		buf.WriteByte(',')
	}
	if len(mj.Packages) != 0 {
		buf.WriteString(`"x.packages":`)
		if mj.Packages != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Packages {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Labels) != 0 {
		buf.WriteString(`"x.labels":`)
		if mj.Labels != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Labels {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_IntermediateSchemabase = iota
	ffj_t_IntermediateSchemano_such_key

	ffj_t_IntermediateSchema_Format

	ffj_t_IntermediateSchema_MegaCollection

	ffj_t_IntermediateSchema_RecordID

	ffj_t_IntermediateSchema_SourceID

	ffj_t_IntermediateSchema_Database

	ffj_t_IntermediateSchema_DataProvider

	ffj_t_IntermediateSchema_RefType

	ffj_t_IntermediateSchema_ArticleNumber

	ffj_t_IntermediateSchema_ArticleTitle

	ffj_t_IntermediateSchema_BookTitle

	ffj_t_IntermediateSchema_Chronology

	ffj_t_IntermediateSchema_Edition

	ffj_t_IntermediateSchema_EISBN

	ffj_t_IntermediateSchema_EISSN

	ffj_t_IntermediateSchema_EndPage

	ffj_t_IntermediateSchema_Genre

	ffj_t_IntermediateSchema_ISBN

	ffj_t_IntermediateSchema_ISSN

	ffj_t_IntermediateSchema_Issue

	ffj_t_IntermediateSchema_JournalTitle

	ffj_t_IntermediateSchema_PageCount

	ffj_t_IntermediateSchema_Pages

	ffj_t_IntermediateSchema_Part

	ffj_t_IntermediateSchema_Places

	ffj_t_IntermediateSchema_Publishers

	ffj_t_IntermediateSchema_Quarter

	ffj_t_IntermediateSchema_RawDate

	ffj_t_IntermediateSchema_Date

	ffj_t_IntermediateSchema_Season

	ffj_t_IntermediateSchema_Series

	ffj_t_IntermediateSchema_ShortTitle

	ffj_t_IntermediateSchema_StartPage

	ffj_t_IntermediateSchema_Volume

	ffj_t_IntermediateSchema_Abstract

	ffj_t_IntermediateSchema_Authors

	ffj_t_IntermediateSchema_DOI

	ffj_t_IntermediateSchema_Languages

	ffj_t_IntermediateSchema_URL

	ffj_t_IntermediateSchema_Version

	ffj_t_IntermediateSchema_ArticleSubtitle

	ffj_t_IntermediateSchema_Fulltext

	ffj_t_IntermediateSchema_Headings

	ffj_t_IntermediateSchema_Subjects

	ffj_t_IntermediateSchema_Type

	ffj_t_IntermediateSchema_Indicator

	ffj_t_IntermediateSchema_Packages

	ffj_t_IntermediateSchema_Labels
)

var ffj_key_IntermediateSchema_Format = []byte("finc.format")

var ffj_key_IntermediateSchema_MegaCollection = []byte("finc.mega_collection")

var ffj_key_IntermediateSchema_RecordID = []byte("finc.record_id")

var ffj_key_IntermediateSchema_SourceID = []byte("finc.source_id")

var ffj_key_IntermediateSchema_Database = []byte("ris.db")

var ffj_key_IntermediateSchema_DataProvider = []byte("ris.dp")

var ffj_key_IntermediateSchema_RefType = []byte("ris.type")

var ffj_key_IntermediateSchema_ArticleNumber = []byte("rft.artnum")

var ffj_key_IntermediateSchema_ArticleTitle = []byte("rft.atitle")

var ffj_key_IntermediateSchema_BookTitle = []byte("rft.btitle")

var ffj_key_IntermediateSchema_Chronology = []byte("rft.chron")

var ffj_key_IntermediateSchema_Edition = []byte("rft.edition")

var ffj_key_IntermediateSchema_EISBN = []byte("rft.isbn")

var ffj_key_IntermediateSchema_EISSN = []byte("rft.eissn")

var ffj_key_IntermediateSchema_EndPage = []byte("rft.epage")

var ffj_key_IntermediateSchema_Genre = []byte("rft.genre")

var ffj_key_IntermediateSchema_ISBN = []byte("rft.isbn")

var ffj_key_IntermediateSchema_ISSN = []byte("rft.issn")

var ffj_key_IntermediateSchema_Issue = []byte("rft.issue")

var ffj_key_IntermediateSchema_JournalTitle = []byte("rft.jtitle")

var ffj_key_IntermediateSchema_PageCount = []byte("rft.tpages")

var ffj_key_IntermediateSchema_Pages = []byte("rft.pages")

var ffj_key_IntermediateSchema_Part = []byte("rft.part")

var ffj_key_IntermediateSchema_Places = []byte("rft.place")

var ffj_key_IntermediateSchema_Publishers = []byte("rft.pub")

var ffj_key_IntermediateSchema_Quarter = []byte("rft.quarter")

var ffj_key_IntermediateSchema_RawDate = []byte("rft.date")

var ffj_key_IntermediateSchema_Date = []byte("x.date")

var ffj_key_IntermediateSchema_Season = []byte("rft.ssn")

var ffj_key_IntermediateSchema_Series = []byte("rft.series")

var ffj_key_IntermediateSchema_ShortTitle = []byte("rft.stitle")

var ffj_key_IntermediateSchema_StartPage = []byte("rft.spage")

var ffj_key_IntermediateSchema_Volume = []byte("rft.volume")

var ffj_key_IntermediateSchema_Abstract = []byte("abstract")

var ffj_key_IntermediateSchema_Authors = []byte("authors")

var ffj_key_IntermediateSchema_DOI = []byte("doi")

var ffj_key_IntermediateSchema_Languages = []byte("languages")

var ffj_key_IntermediateSchema_URL = []byte("url")

var ffj_key_IntermediateSchema_Version = []byte("version")

var ffj_key_IntermediateSchema_ArticleSubtitle = []byte("x.subtitle")

var ffj_key_IntermediateSchema_Fulltext = []byte("x.fulltext")

var ffj_key_IntermediateSchema_Headings = []byte("x.headings")

var ffj_key_IntermediateSchema_Subjects = []byte("x.subjects")

var ffj_key_IntermediateSchema_Type = []byte("x.type")

var ffj_key_IntermediateSchema_Indicator = []byte("x.indicator")

var ffj_key_IntermediateSchema_Packages = []byte("x.packages")

var ffj_key_IntermediateSchema_Labels = []byte("x.labels")

func (uj *IntermediateSchema) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *IntermediateSchema) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_IntermediateSchemabase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_IntermediateSchemano_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_IntermediateSchema_Abstract, kn) {
						currentKey = ffj_t_IntermediateSchema_Abstract
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Authors, kn) {
						currentKey = ffj_t_IntermediateSchema_Authors
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_IntermediateSchema_DOI, kn) {
						currentKey = ffj_t_IntermediateSchema_DOI
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_IntermediateSchema_Format, kn) {
						currentKey = ffj_t_IntermediateSchema_Format
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_MegaCollection, kn) {
						currentKey = ffj_t_IntermediateSchema_MegaCollection
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_RecordID, kn) {
						currentKey = ffj_t_IntermediateSchema_RecordID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_SourceID, kn) {
						currentKey = ffj_t_IntermediateSchema_SourceID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_IntermediateSchema_Languages, kn) {
						currentKey = ffj_t_IntermediateSchema_Languages
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_IntermediateSchema_Database, kn) {
						currentKey = ffj_t_IntermediateSchema_Database
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_DataProvider, kn) {
						currentKey = ffj_t_IntermediateSchema_DataProvider
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_RefType, kn) {
						currentKey = ffj_t_IntermediateSchema_RefType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ArticleNumber, kn) {
						currentKey = ffj_t_IntermediateSchema_ArticleNumber
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ArticleTitle, kn) {
						currentKey = ffj_t_IntermediateSchema_ArticleTitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_BookTitle, kn) {
						currentKey = ffj_t_IntermediateSchema_BookTitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Chronology, kn) {
						currentKey = ffj_t_IntermediateSchema_Chronology
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Edition, kn) {
						currentKey = ffj_t_IntermediateSchema_Edition
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_EISBN, kn) {
						currentKey = ffj_t_IntermediateSchema_EISBN
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_EISSN, kn) {
						currentKey = ffj_t_IntermediateSchema_EISSN
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_EndPage, kn) {
						currentKey = ffj_t_IntermediateSchema_EndPage
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Genre, kn) {
						currentKey = ffj_t_IntermediateSchema_Genre
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ISBN, kn) {
						currentKey = ffj_t_IntermediateSchema_ISBN
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ISSN, kn) {
						currentKey = ffj_t_IntermediateSchema_ISSN
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Issue, kn) {
						currentKey = ffj_t_IntermediateSchema_Issue
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_JournalTitle, kn) {
						currentKey = ffj_t_IntermediateSchema_JournalTitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_PageCount, kn) {
						currentKey = ffj_t_IntermediateSchema_PageCount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Pages, kn) {
						currentKey = ffj_t_IntermediateSchema_Pages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Part, kn) {
						currentKey = ffj_t_IntermediateSchema_Part
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Places, kn) {
						currentKey = ffj_t_IntermediateSchema_Places
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Publishers, kn) {
						currentKey = ffj_t_IntermediateSchema_Publishers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Quarter, kn) {
						currentKey = ffj_t_IntermediateSchema_Quarter
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_RawDate, kn) {
						currentKey = ffj_t_IntermediateSchema_RawDate
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Season, kn) {
						currentKey = ffj_t_IntermediateSchema_Season
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Series, kn) {
						currentKey = ffj_t_IntermediateSchema_Series
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ShortTitle, kn) {
						currentKey = ffj_t_IntermediateSchema_ShortTitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_StartPage, kn) {
						currentKey = ffj_t_IntermediateSchema_StartPage
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Volume, kn) {
						currentKey = ffj_t_IntermediateSchema_Volume
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_IntermediateSchema_URL, kn) {
						currentKey = ffj_t_IntermediateSchema_URL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_IntermediateSchema_Version, kn) {
						currentKey = ffj_t_IntermediateSchema_Version
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'x':

					if bytes.Equal(ffj_key_IntermediateSchema_Date, kn) {
						currentKey = ffj_t_IntermediateSchema_Date
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_ArticleSubtitle, kn) {
						currentKey = ffj_t_IntermediateSchema_ArticleSubtitle
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Fulltext, kn) {
						currentKey = ffj_t_IntermediateSchema_Fulltext
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Headings, kn) {
						currentKey = ffj_t_IntermediateSchema_Headings
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Subjects, kn) {
						currentKey = ffj_t_IntermediateSchema_Subjects
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Type, kn) {
						currentKey = ffj_t_IntermediateSchema_Type
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Indicator, kn) {
						currentKey = ffj_t_IntermediateSchema_Indicator
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Packages, kn) {
						currentKey = ffj_t_IntermediateSchema_Packages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_IntermediateSchema_Labels, kn) {
						currentKey = ffj_t_IntermediateSchema_Labels
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Labels, kn) {
					currentKey = ffj_t_IntermediateSchema_Labels
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Packages, kn) {
					currentKey = ffj_t_IntermediateSchema_Packages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Indicator, kn) {
					currentKey = ffj_t_IntermediateSchema_Indicator
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Type, kn) {
					currentKey = ffj_t_IntermediateSchema_Type
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Subjects, kn) {
					currentKey = ffj_t_IntermediateSchema_Subjects
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Headings, kn) {
					currentKey = ffj_t_IntermediateSchema_Headings
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Fulltext, kn) {
					currentKey = ffj_t_IntermediateSchema_Fulltext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_ArticleSubtitle, kn) {
					currentKey = ffj_t_IntermediateSchema_ArticleSubtitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Version, kn) {
					currentKey = ffj_t_IntermediateSchema_Version
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_IntermediateSchema_URL, kn) {
					currentKey = ffj_t_IntermediateSchema_URL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Languages, kn) {
					currentKey = ffj_t_IntermediateSchema_Languages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_IntermediateSchema_DOI, kn) {
					currentKey = ffj_t_IntermediateSchema_DOI
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Authors, kn) {
					currentKey = ffj_t_IntermediateSchema_Authors
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Abstract, kn) {
					currentKey = ffj_t_IntermediateSchema_Abstract
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Volume, kn) {
					currentKey = ffj_t_IntermediateSchema_Volume
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_StartPage, kn) {
					currentKey = ffj_t_IntermediateSchema_StartPage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_ShortTitle, kn) {
					currentKey = ffj_t_IntermediateSchema_ShortTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Series, kn) {
					currentKey = ffj_t_IntermediateSchema_Series
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Season, kn) {
					currentKey = ffj_t_IntermediateSchema_Season
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Date, kn) {
					currentKey = ffj_t_IntermediateSchema_Date
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_RawDate, kn) {
					currentKey = ffj_t_IntermediateSchema_RawDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Quarter, kn) {
					currentKey = ffj_t_IntermediateSchema_Quarter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Publishers, kn) {
					currentKey = ffj_t_IntermediateSchema_Publishers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Places, kn) {
					currentKey = ffj_t_IntermediateSchema_Places
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Part, kn) {
					currentKey = ffj_t_IntermediateSchema_Part
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Pages, kn) {
					currentKey = ffj_t_IntermediateSchema_Pages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_PageCount, kn) {
					currentKey = ffj_t_IntermediateSchema_PageCount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_JournalTitle, kn) {
					currentKey = ffj_t_IntermediateSchema_JournalTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Issue, kn) {
					currentKey = ffj_t_IntermediateSchema_Issue
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_ISSN, kn) {
					currentKey = ffj_t_IntermediateSchema_ISSN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_ISBN, kn) {
					currentKey = ffj_t_IntermediateSchema_ISBN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Genre, kn) {
					currentKey = ffj_t_IntermediateSchema_Genre
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_EndPage, kn) {
					currentKey = ffj_t_IntermediateSchema_EndPage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_EISSN, kn) {
					currentKey = ffj_t_IntermediateSchema_EISSN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_EISBN, kn) {
					currentKey = ffj_t_IntermediateSchema_EISBN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Edition, kn) {
					currentKey = ffj_t_IntermediateSchema_Edition
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Chronology, kn) {
					currentKey = ffj_t_IntermediateSchema_Chronology
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_BookTitle, kn) {
					currentKey = ffj_t_IntermediateSchema_BookTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_ArticleTitle, kn) {
					currentKey = ffj_t_IntermediateSchema_ArticleTitle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_ArticleNumber, kn) {
					currentKey = ffj_t_IntermediateSchema_ArticleNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_RefType, kn) {
					currentKey = ffj_t_IntermediateSchema_RefType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_DataProvider, kn) {
					currentKey = ffj_t_IntermediateSchema_DataProvider
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_Database, kn) {
					currentKey = ffj_t_IntermediateSchema_Database
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_IntermediateSchema_SourceID, kn) {
					currentKey = ffj_t_IntermediateSchema_SourceID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_RecordID, kn) {
					currentKey = ffj_t_IntermediateSchema_RecordID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_MegaCollection, kn) {
					currentKey = ffj_t_IntermediateSchema_MegaCollection
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_IntermediateSchema_Format, kn) {
					currentKey = ffj_t_IntermediateSchema_Format
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_IntermediateSchemano_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_IntermediateSchema_Format:
					goto handle_Format

				case ffj_t_IntermediateSchema_MegaCollection:
					goto handle_MegaCollection

				case ffj_t_IntermediateSchema_RecordID:
					goto handle_RecordID

				case ffj_t_IntermediateSchema_SourceID:
					goto handle_SourceID

				case ffj_t_IntermediateSchema_Database:
					goto handle_Database

				case ffj_t_IntermediateSchema_DataProvider:
					goto handle_DataProvider

				case ffj_t_IntermediateSchema_RefType:
					goto handle_RefType

				case ffj_t_IntermediateSchema_ArticleNumber:
					goto handle_ArticleNumber

				case ffj_t_IntermediateSchema_ArticleTitle:
					goto handle_ArticleTitle

				case ffj_t_IntermediateSchema_BookTitle:
					goto handle_BookTitle

				case ffj_t_IntermediateSchema_Chronology:
					goto handle_Chronology

				case ffj_t_IntermediateSchema_Edition:
					goto handle_Edition

				case ffj_t_IntermediateSchema_EISBN:
					goto handle_EISBN

				case ffj_t_IntermediateSchema_EISSN:
					goto handle_EISSN

				case ffj_t_IntermediateSchema_EndPage:
					goto handle_EndPage

				case ffj_t_IntermediateSchema_Genre:
					goto handle_Genre

				case ffj_t_IntermediateSchema_ISBN:
					goto handle_ISBN

				case ffj_t_IntermediateSchema_ISSN:
					goto handle_ISSN

				case ffj_t_IntermediateSchema_Issue:
					goto handle_Issue

				case ffj_t_IntermediateSchema_JournalTitle:
					goto handle_JournalTitle

				case ffj_t_IntermediateSchema_PageCount:
					goto handle_PageCount

				case ffj_t_IntermediateSchema_Pages:
					goto handle_Pages

				case ffj_t_IntermediateSchema_Part:
					goto handle_Part

				case ffj_t_IntermediateSchema_Places:
					goto handle_Places

				case ffj_t_IntermediateSchema_Publishers:
					goto handle_Publishers

				case ffj_t_IntermediateSchema_Quarter:
					goto handle_Quarter

				case ffj_t_IntermediateSchema_RawDate:
					goto handle_RawDate

				case ffj_t_IntermediateSchema_Date:
					goto handle_Date

				case ffj_t_IntermediateSchema_Season:
					goto handle_Season

				case ffj_t_IntermediateSchema_Series:
					goto handle_Series

				case ffj_t_IntermediateSchema_ShortTitle:
					goto handle_ShortTitle

				case ffj_t_IntermediateSchema_StartPage:
					goto handle_StartPage

				case ffj_t_IntermediateSchema_Volume:
					goto handle_Volume

				case ffj_t_IntermediateSchema_Abstract:
					goto handle_Abstract

				case ffj_t_IntermediateSchema_Authors:
					goto handle_Authors

				case ffj_t_IntermediateSchema_DOI:
					goto handle_DOI

				case ffj_t_IntermediateSchema_Languages:
					goto handle_Languages

				case ffj_t_IntermediateSchema_URL:
					goto handle_URL

				case ffj_t_IntermediateSchema_Version:
					goto handle_Version

				case ffj_t_IntermediateSchema_ArticleSubtitle:
					goto handle_ArticleSubtitle

				case ffj_t_IntermediateSchema_Fulltext:
					goto handle_Fulltext

				case ffj_t_IntermediateSchema_Headings:
					goto handle_Headings

				case ffj_t_IntermediateSchema_Subjects:
					goto handle_Subjects

				case ffj_t_IntermediateSchema_Type:
					goto handle_Type

				case ffj_t_IntermediateSchema_Indicator:
					goto handle_Indicator

				case ffj_t_IntermediateSchema_Packages:
					goto handle_Packages

				case ffj_t_IntermediateSchema_Labels:
					goto handle_Labels

				case ffj_t_IntermediateSchemano_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Format:

	/* handler: uj.Format type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Format = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MegaCollection:

	/* handler: uj.MegaCollection type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MegaCollection = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RecordID:

	/* handler: uj.RecordID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.RecordID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SourceID:

	/* handler: uj.SourceID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SourceID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Database:

	/* handler: uj.Database type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Database = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DataProvider:

	/* handler: uj.DataProvider type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.DataProvider = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RefType:

	/* handler: uj.RefType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.RefType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ArticleNumber:

	/* handler: uj.ArticleNumber type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ArticleNumber = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ArticleTitle:

	/* handler: uj.ArticleTitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ArticleTitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BookTitle:

	/* handler: uj.BookTitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.BookTitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Chronology:

	/* handler: uj.Chronology type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Chronology = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Edition:

	/* handler: uj.Edition type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Edition = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EISBN:

	/* handler: uj.EISBN type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.EISBN = nil
		} else {

			uj.EISBN = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.EISBN = append(uj.EISBN, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EISSN:

	/* handler: uj.EISSN type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.EISSN = nil
		} else {

			uj.EISSN = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.EISSN = append(uj.EISSN, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EndPage:

	/* handler: uj.EndPage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.EndPage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Genre:

	/* handler: uj.Genre type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Genre = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ISBN:

	/* handler: uj.ISBN type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.ISBN = nil
		} else {

			uj.ISBN = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.ISBN = append(uj.ISBN, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ISSN:

	/* handler: uj.ISSN type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.ISSN = nil
		} else {

			uj.ISSN = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.ISSN = append(uj.ISSN, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Issue:

	/* handler: uj.Issue type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Issue = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_JournalTitle:

	/* handler: uj.JournalTitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.JournalTitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PageCount:

	/* handler: uj.PageCount type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PageCount = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pages:

	/* handler: uj.Pages type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Pages = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Part:

	/* handler: uj.Part type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Part = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Places:

	/* handler: uj.Places type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Places = nil
		} else {

			uj.Places = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Places = append(uj.Places, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publishers:

	/* handler: uj.Publishers type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Publishers = nil
		} else {

			uj.Publishers = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Publishers = append(uj.Publishers, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Quarter:

	/* handler: uj.Quarter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Quarter = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RawDate:

	/* handler: uj.RawDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.RawDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Date:

	/* handler: uj.Date type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = uj.Date.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Season:

	/* handler: uj.Season type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Season = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Series:

	/* handler: uj.Series type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Series = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ShortTitle:

	/* handler: uj.ShortTitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ShortTitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartPage:

	/* handler: uj.StartPage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.StartPage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Volume:

	/* handler: uj.Volume type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Volume = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Abstract:

	/* handler: uj.Abstract type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Abstract = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Authors:

	/* handler: uj.Authors type=[]finc.Author kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Authors = nil
		} else {

			uj.Authors = make([]Author, 0)

			wantVal := true

			for {

				var v Author

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=finc.Author kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

						state = fflib.FFParse_after_value
						goto mainparse
					}

					err = v.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
					if err != nil {
						return err
					}
					state = fflib.FFParse_after_value
				}

				uj.Authors = append(uj.Authors, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DOI:

	/* handler: uj.DOI type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.DOI = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Languages:

	/* handler: uj.Languages type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Languages = nil
		} else {

			uj.Languages = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Languages = append(uj.Languages, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: uj.URL type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.URL = nil
		} else {

			uj.URL = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.URL = append(uj.URL, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Version:

	/* handler: uj.Version type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Version = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ArticleSubtitle:

	/* handler: uj.ArticleSubtitle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ArticleSubtitle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fulltext:

	/* handler: uj.Fulltext type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Fulltext = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Headings:

	/* handler: uj.Headings type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Headings = nil
		} else {

			uj.Headings = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Headings = append(uj.Headings, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Subjects:

	/* handler: uj.Subjects type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Subjects = nil
		} else {

			uj.Subjects = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Subjects = append(uj.Subjects, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: uj.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Indicator:

	/* handler: uj.Indicator type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Indicator = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Packages:

	/* handler: uj.Packages type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Packages = nil
		} else {

			uj.Packages = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Packages = append(uj.Packages, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Labels:

	/* handler: uj.Labels type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Labels = nil
		} else {

			uj.Labels = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Labels = append(uj.Labels, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
